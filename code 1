#include <WiFi.h>
#include <WebServer.h>
#include <SPIFFS.h>
#include <SPI.h>
#include <MFRC522.h>

// WiFi instellingen - PAS DIT AAN!
const char* ssid = "bletchley";
const char* password = "laptop!internet";
const char* adminPassword = "admin123";

WebServer server(80);

// RFID instellingen
#define RST_PIN 21
#define SS_PIN 5
#define LED_PIN 12

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Vereenvoudigde initialisatie

// Variabelen voor kaartkoppeling
bool linkingMode = false;
String userToLink = "";
unsigned long linkingStartTime = 0;
const unsigned long LINKING_TIMEOUT = 30000; // 30 seconden timeout

// Eenvoudige functie om gebruikers op te slaan
void addUser(const String& user) {
  if(user.length() == 0) {
    Serial.println("Lege gebruikersnaam, niet toegevoegd");
    return;
  }
  
  File file = SPIFFS.open("/users.txt", FILE_APPEND);
  if(!file){
    Serial.println("Fout bij openen users.txt");
    return;
  }
  
  if(file.println(user)){
    Serial.println("Gebruiker toegevoegd: " + user);
  } else {
    Serial.println("Fout bij schrijven gebruiker");
  }
  file.close();
}

// Gebruiker verwijderen
void removeUser(const String& user) {
  if(user.length() == 0) {
    Serial.println("Lege gebruikersnaam, niet verwijderd");
    return;
  }
  
  File file = SPIFFS.open("/users.txt", FILE_READ);
  if(!file) {
    Serial.println("Geen users.txt bestand gevonden");
    return;
  }

  String content;
  bool userFound = false;
  
  while(file.available()){
    String line = file.readStringUntil('\n');
    line.trim();
    if(line != user && line.length() > 0){
      content += line + "\n";
    } else if(line == user) {
      userFound = true;
    }
  }
  file.close();

  file = SPIFFS.open("/users.txt", FILE_WRITE);
  if(file){
    file.print(content);
    file.close();
    if(userFound) {
      Serial.println("Gebruiker verwijderd: " + user);
    } else {
      Serial.println("Gebruiker niet gevonden: " + user);
    }
  } else {
    Serial.println("Fout bij openen users.txt voor schrijven");
  }
}

// Check of gebruiker bestaat
bool userExists(const String& user) {
  if(user.length() == 0) return false;
  
  File file = SPIFFS.open("/users.txt", FILE_READ);
  if(!file) {
    Serial.println("Geen users.txt bestand gevonden bij userExists");
    return false;
  }

  bool exists = false;
  while(file.available()){
    String line = file.readStringUntil('\n');
    line.trim();
    if(line == user){
      exists = true;
      break;
    }
  }
  file.close();
  return exists;
}

// Kaart UID naar String converteren
String getUIDString() {
  String uidString = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) {
      uidString += "0";
    }
    uidString += String(mfrc522.uid.uidByte[i], HEX);
  }
  uidString.toUpperCase();
  return uidString;
}

// Kaart toevoegen aan gebruiker
void addCardToUser(const String& user, const String& cardUID) {
  File file = SPIFFS.open("/cards.txt", FILE_APPEND);
  if(!file){
    Serial.println("Fout bij openen cards.txt");
    return;
  }
  
  String line = user + "=" + cardUID;
  if(file.println(line)){
    Serial.println("Kaart gekoppeld: " + cardUID + " -> " + user);
  } else {
    Serial.println("Fout bij schrijven kaart");
  }
  file.close();
}

// Gebruiker zoeken bij kaart UID
String getUserByCard(const String& cardUID) {
  File file = SPIFFS.open("/cards.txt", FILE_READ);
  if(!file) {
    return "";
  }

  while(file.available()){
    String line = file.readStringUntil('\n');
    line.trim();
    int separator = line.indexOf('=');
    if(separator != -1) {
      String storedUser = line.substring(0, separator);
      String storedCard = line.substring(separator + 1);
      if(storedCard == cardUID) {
        file.close();
        return storedUser;
      }
    }
  }
  file.close();
  return "";
}

// Kaart verwijderen bij gebruiker
void removeCardFromUser(const String& user) {
  File file = SPIFFS.open("/cards.txt", FILE_READ);
  if(!file) {
    return;
  }

  String content;
  while(file.available()){
    String line = file.readStringUntil('\n');
    line.trim();
    int separator = line.indexOf('=');
    if(separator != -1) {
      String storedUser = line.substring(0, separator);
      if(storedUser != user && line.length() > 0) {
        content += line + "\n";
      }
    }
  }
  file.close();

  file = SPIFFS.open("/cards.txt", FILE_WRITE);
  if(file){
    file.print(content);
    file.close();
    Serial.println("Kaarten verwijderd voor gebruiker: " + user);
  }
}

// Toon alle gebruikers en kaarten
String listUsersAndCards() {
  File file = SPIFFS.open("/users.txt", FILE_READ);
  if(!file) {
    return "Geen gebruikers gevonden";
  }

  String userList = "Geregistreerde gebruikers en kaarten:\n\n";
  int count = 0;
  
  // Lees alle gebruikers
  while(file.available()){
    String user = file.readStringUntil('\n');
    user.trim();
    if(user.length() > 0){
      userList += "üë§ " + user + "\n";
      
      // Zoek gekoppelde kaarten
      File cardFile = SPIFFS.open("/cards.txt", FILE_READ);
      if(cardFile) {
        bool hasCard = false;
        while(cardFile.available()){
          String line = cardFile.readStringUntil('\n');
          line.trim();
          int separator = line.indexOf('=');
          if(separator != -1) {
            String storedUser = line.substring(0, separator);
            String storedCard = line.substring(separator + 1);
            if(storedUser == user) {
              userList += "   ü™™ Kaart: " + storedCard + "\n";
              hasCard = true;
            }
          }
        }
        cardFile.close();
        if(!hasCard) {
          userList += "   ‚ùå Geen kaart gekoppeld\n";
        }
      }
      userList += "\n";
      count++;
    }
  }
  file.close();
  
  if(count == 0) {
    return "Geen gebruikers geregistreerd";
  }
  userList += "Totaal: " + String(count) + " gebruiker(s)";
  return userList;
}

// Controleer beheerderswachtwoord
bool checkAdminPassword() {
  if(server.hasArg("password")){
    String pwd = server.arg("password");
    return (pwd == adminPassword);
  }
  return false;
}

// RFID kaart verwerken
void handleRFID() {
  // Reset de loop als er geen nieuwe kaart aanwezig is
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Selecteer een van de kaarten
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  String cardUID = getUIDString();
  Serial.println("Kaart gescand: " + cardUID);

  if (linkingMode) {
    // Koppel kaart aan gebruiker
    addCardToUser(userToLink, cardUID);
    linkingMode = false;
    
    // Bevestiging met LED
    digitalWrite(LED_PIN, HIGH);
    delay(500);
    digitalWrite(LED_PIN, LOW);
    delay(200);
    digitalWrite(LED_PIN, HIGH);
    delay(500);
    digitalWrite(LED_PIN, LOW);
    
    Serial.println("Kaart " + cardUID + " gekoppeld aan gebruiker: " + userToLink);
  } else {
    // Toegangscontrole
    String user = getUserByCard(cardUID);
    if (user != "") {
      // Toegang toegestaan
      Serial.println("Toegang toegestaan voor: " + user);
      digitalWrite(LED_PIN, HIGH);
      delay(2000);
      digitalWrite(LED_PIN, LOW);
    } else {
      // Toegang geweigerd
      Serial.println("Toegang geweigerd voor kaart: " + cardUID);
      for (int i = 0; i < 3; i++) {
        digitalWrite(LED_PIN, HIGH);
        delay(200);
        digitalWrite(LED_PIN, LOW);
        delay(200);
      }
    }
  }

  // Stop encryptie
  mfrc522.PICC_HaltA();
}

// HTML homepage
void handleRoot() {
  String html = "<!DOCTYPE html><html><head><title>ESP32 NAC System</title>";
  html += "<meta charset='UTF-8'><meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<style>body{font-family:Arial,sans-serif;margin:20px;background:#f5f5f5;}";
  html += ".container{max-width:800px;margin:0 auto;background:white;padding:20px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);}";
  html += "h1{color:#333;text-align:center;}";
  html += ".section{margin:20px 0;padding:15px;border:1px solid #ddd;border-radius:5px;}";
  html += "input[type='text'],input[type='password']{width:200px;padding:8px;margin:5px;border:1px solid #ccc;border-radius:4px;}";
  html += "button{background:#4CAF50;color:white;padding:10px 15px;border:none;border-radius:4px;cursor:pointer;margin:5px;}";
  html += "button:hover{background:#45a049;}";
  html += ".danger{background:#f44336;}";
  html += ".danger:hover{background:#da190b;}";
  html += ".warning{background:#ff9800;}";
  html += ".warning:hover{background:#e68900;}";
  html += ".status{background:#2196F3;color:white;padding:10px;border-radius:4px;margin:10px 0;}";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<h1>ESP32 NAC Beheerpaneel</h1>";
  html += "<p><strong>IP adres: " + WiFi.localIP().toString() + "</strong></p>";
  
  if (linkingMode) {
    html += "<div class='status'>";
    html += "üîÑ <strong>Koppelmodus actief!</strong><br>";
    html += "Houd een RFID kaart bij de lezer om deze te koppelen aan: <strong>" + userToLink + "</strong><br>";
    html += "Timeout over: " + String((LINKING_TIMEOUT - (millis() - linkingStartTime)) / 1000) + " seconden";
    html += "</div>";
  }
  
  html += "<div class='section'><h2>Toegang Controleren</h2>";
  html += "<form action='/access' method='GET'>";
  html += "<input type='text' name='name' placeholder='Gebruikersnaam'>";
  html += "<button type='submit'>Toegang Controleren</button>";
  html += "</form></div>";
  
  html += "<div class='section'><h2>Gebruiker Toevoegen</h2>";
  html += "<form action='/users/add' method='GET'>";
  html += "<input type='text' name='name' placeholder='Gebruikersnaam'>";
  html += "<input type='password' name='password' placeholder='Beheerderswachtwoord'>";
  html += "<button type='submit'>Gebruiker Toevoegen</button>";
  html += "</form></div>";
  
  html += "<div class='section'><h2>RFID Kaart Koppelen</h2>";
  html += "<form action='/users/linkcard' method='GET'>";
  html += "<input type='text' name='name' placeholder='Gebruikersnaam'>";
  html += "<input type='password' name='password' placeholder='Beheerderswachtwoord'>";
  html += "<button type='submit' class='warning'>Kaart Koppelen</button>";
  html += "</form></div>";
  
  html += "<div class='section'><h2>Gebruiker Verwijderen</h2>";
  html += "<form action='/users/remove' method='GET' onsubmit='return confirm(\"Weet je het zeker?\")'>";
  html += "<input type='text' name='name' placeholder='Gebruikersnaam'>";
  html += "<input type='password' name='password' placeholder='Beheerderswachtwoord'>";
  html += "<button type='submit' class='danger'>Gebruiker Verwijderen</button>";
  html += "</form></div>";
  
  html += "<div class='section'><h2>Gebruikers & Kaarten Lijst</h2>";
  html += "<form action='/users/list' method='GET'>";
  html += "<input type='password' name='password' placeholder='Beheerderswachtwoord'>";
  html += "<button type='submit'>Toon Gebruikers & Kaarten</button>";
  html += "</form></div>";
  
  html += "</div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleAccess() {
  if(server.hasArg("name")){
    String user = server.arg("name");
    user.trim();
    
    if(user.length() == 0) {
      server.send(400, "text/plain", "Lege gebruikersnaam!");
      return;
    }
    
    if(userExists(user)){
      server.send(200, "text/plain", "‚úÖ Toegang toegestaan voor: " + user);
      Serial.println("Toegang toegestaan: " + user);
    } else {
      server.send(403, "text/plain", "‚ùå Toegang geweigerd voor: " + user);
      Serial.println("Toegang geweigerd: " + user);
    }
  } else {
    server.send(400, "text/plain", "Geen gebruikersnaam opgegeven!");
  }
}

void handleAddUser() {
  if(!server.hasArg("name") || !server.hasArg("password")){
    server.send(400, "text/plain", "Ongeldig verzoek! Gebruik: /users/add?name=gebruiker&password=admin123");
    return;
  }
  
  if(!checkAdminPassword()){
    server.send(401, "text/plain", "‚ùå Niet geautoriseerd! Ongeldig wachtwoord.");
    return;
  }
  
  String user = server.arg("name");
  user.trim();
  
  if(user.length() == 0) {
    server.send(400, "text/plain", "Lege gebruikersnaam!");
    return;
  }
  
  if(userExists(user)){
    server.send(409, "text/plain", "‚ö†Ô∏è Gebruiker bestaat al: " + user);
  } else {
    addUser(user);
    server.send(200, "text/plain", "‚úÖ Gebruiker toegevoegd: " + user + "\n\nJe kunt nu een RFID kaart koppelen via 'RFID Kaart Koppelen'");
  }
}

void handleLinkCard() {
  if(!server.hasArg("name") || !server.hasArg("password")){
    server.send(400, "text/plain", "Ongeldig verzoek! Gebruik: /users/linkcard?name=gebruiker&password=admin123");
    return;
  }
  
  if(!checkAdminPassword()){
    server.send(401, "text/plain", "‚ùå Niet geautoriseerd! Ongeldig wachtwoord.");
    return;
  }
  
  String user = server.arg("name");
  user.trim();
  
  if(user.length() == 0) {
    server.send(400, "text/plain", "Lege gebruikersnaam!");
    return;
  }
  
  if(!userExists(user)){
    server.send(404, "text/plain", "‚ö†Ô∏è Gebruiker niet gevonden: " + user);
    return;
  }
  
  // Start koppelmodus
  linkingMode = true;
  userToLink = user;
  linkingStartTime = millis();
  
  server.send(200, "text/html", 
    "<html><body style='font-family: Arial; margin: 20px;'>"
    "<h1>üîó Kaart Koppelen</h1>"
    "<div style='background: #e3f2fd; padding: 20px; border-radius: 10px;'>"
    "<h2>Koppelmodus actief!</h2>"
    "<p><strong>Gebruiker:</strong> " + user + "</p>"
    "<p>Houd nu een RFID kaart bij de lezer...</p>"
    "<p>Deze modus blijft 30 seconden actief.</p>"
    "<p><a href='/'>Terug naar hoofdpagina</a></p>"
    "</div>"
    "</body></html>"
  );
}

void handleRemoveUser() {
  if(!server.hasArg("name") || !server.hasArg("password")){
    server.send(400, "text/plain", "Ongeldig verzoek! Gebruik: /users/remove?name=gebruiker&password=admin123");
    return;
  }
  
  if(!checkAdminPassword()){
    server.send(401, "text/plain", "‚ùå Niet geautoriseerd! Ongeldig wachtwoord.");
    return;
  }
  
  String user = server.arg("name");
  user.trim();
  
  if(user.length() == 0) {
    server.send(400, "text/plain", "Lege gebruikersnaam!");
    return;
  }
  
  if(!userExists(user)){
    server.send(404, "text/plain", "‚ö†Ô∏è Gebruiker niet gevonden: " + user);
  } else {
    removeUser(user);
    removeCardFromUser(user);
    server.send(200, "text/plain", "‚úÖ Gebruiker verwijderd: " + user + " (inclusief gekoppelde kaarten)");
  }
}

void handleListUsers() {
  if(!server.hasArg("password")){
    server.send(400, "text/plain", "Wachtwoord vereist! Gebruik: /users/list?password=admin123");
    return;
  }
  
  if(!checkAdminPassword()){
    server.send(401, "text/plain", "‚ùå Niet geautoriseerd! Ongeldig wachtwoord.");
    return;
  }
  
  server.send(200, "text/plain", listUsersAndCards());
}

void handleNotFound() {
  String message = "Pagina niet gevonden.\n\n";
  message += "Beschikbare endpoints:\n";
  message += "  GET /                 - Beheer interface\n";
  message += "  GET /access?name=USER - Toegang controleren\n";
  message += "  GET /users/add?name=USER&password=admin123\n";
  message += "  GET /users/linkcard?name=USER&password=admin123\n";
  message += "  GET /users/remove?name=USER&password=admin123\n";
  message += "  GET /users/list?password=admin123\n";
  server.send(404, "text/plain", message);
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  Serial.println();
  Serial.println("=== ESP32 NAC System met RFID ===");
  
  // SPIFFS starten
  if(!SPIFFS.begin(true)){
    Serial.println("SPIFFS kon niet starten!");
    return;
  }
  Serial.println("SPIFFS gestart");

  // RFID lezer initialiseren
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  SPI.begin();
  mfrc522.PCD_Init();
  Serial.println("RFID lezer ge√Ønitialiseerd");
  Serial.print("RFID lezer versie: ");
  mfrc522.PCD_DumpVersionToSerial();

  // WiFi verbinden
  Serial.print("Verbinden met WiFi: ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nWiFi verbinding mislukt!");
    Serial.println("Controleer SSID en wachtwoord");
    return;
  }
  
  Serial.println("\nWiFi verbonden!");
  Serial.print("IP adres: ");
  Serial.println(WiFi.localIP());

  // Server routes
  server.on("/", handleRoot);
  server.on("/access", handleAccess);
  server.on("/users/add", handleAddUser);
  server.on("/users/linkcard", handleLinkCard);
  server.on("/users/remove", handleRemoveUser);
  server.on("/users/list", handleListUsers);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server gestart!");
  Serial.println("Open je browser en ga naar: http://" + WiFi.localIP().toString());
  Serial.println();
  Serial.println("Standaard beheerderswachtwoord: admin123");
  Serial.println("Vergeet niet het wachtwoord aan te passen in de code!");
}

void loop() {
  server.handleClient();
  
  // Verwerk RFID kaarten
  handleRFID();
  
  // Timeout voor koppelmodus
  if (linkingMode && (millis() - linkingStartTime > LINKING_TIMEOUT)) {
    linkingMode = false;
    Serial.println("Koppelmodus timeout - geen kaart gescand");
    
    // Geef timeout signaal met LED
    for (int i = 0; i < 5; i++) {
      digitalWrite(LED_PIN, HIGH);
      delay(100);
      digitalWrite(LED_PIN, LOW);
      delay(100);
    }
  }
  
  delay(100);
}
